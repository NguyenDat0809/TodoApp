@using Microsoft.AspNetCore.WebUtilities
@using Todo.Models
@{
    ViewData["Title"] = "DoIts";
    var display = "visible";
    var url = Url.Action("AddOrEdit", "Home", null, Context.Request.Scheme);
    var indexWithTargetPageUrl = Url.Action("FilterPaging", "Home", null);
}
@model IEnumerable<ToDo>

<div class="container">
    <div class="container-fluid">
        <form asp-action="Filter" method="post">
            <div class="d-flex justify-content-around align-items-center">
                <div class="flex-fill p-2">
                    <label class="form-label">Category</label>
                    @{
                        /*
                        asp-items will run after options of select
                        SelectList là một lớp trong ASP.NET MVC được sử dụng để đóng gói dữ liệu để hiển thị trong một danh sách thả xuống (dropdown list) trong ứng dụng MVC
                        */
                    }
                    <select name="filter" class="form-select"
                            asp-items="@(new SelectList(ViewBag.Categories, "CategoryId", "Name", ViewBag.Filters.CategoryId))">
                        <option value="all">All</option>
                    </select>
                </div>
                <div class="flex-fill p-2">
                    <label class="form-label">Due:</label>
                    <select name="filter" class="form-select"
                            asp-items="@(new SelectList(ViewBag.DueFilters, "Key", "Value", ViewBag.Filters.Due))">
                        <option value="all">All</option>
                    </select>
                </div>
                <div class="flex-fill p-2">
                    <label class="form-label">Status</label>
                    <select name="filter" class="form-select"
                            asp-items="@(new SelectList(ViewBag.Statuses, "StatusId", "Name", ViewBag.Filters.StatusId))">
                        <option value="all">All</option>
                    </select>
                </div>
                <div class="flex-fill p-2">
                    <label class="form-label">Search</label>
                    <input name="searchDes" class="form-control" />
                </div>
                <button type="submit" class="btn h-50 mt-4 mx-1 btn-color-custom"><i class="fa-solid fa-magnifying-glass"></i></button>
                <a asp-action="Index" asp-route-id="" class="btn h-50 mt-4 mx-1 btn-color-custom">
                    <i class="fa-solid fa-arrows-rotate"></i>
                </a>
            </div>
        </form>
    </div>

    <div class="container-fluid">
        <!--Task List-->
        <div id="view-all">
            @await Html.PartialAsync("ViewAll", Model)
            <!--Paging-->
            <div class="">
                <nav aria-label="page navigation" class="d-flex justify-content-sm-end">
                    <ul class="pagination text-decoration-none">
                        @{
                            //create the url to indexPage 1
                            // 'FilterParams' is a model to holde Filters instance
                            var filterParams = ViewBag.Filters;

                            //create origin link with parameters: filter, searchDes (all links have both parameters) 
                            var originLink = QueryHelpers.AddQueryString(indexWithTargetPageUrl, "filterString", ViewBag.Filters.FilterString);
                            originLink = QueryHelpers.AddQueryString(originLink, "searchDes", ViewBag.Filters.SearchDes);

                            //create first Page index url
                            var firstPageUrl = QueryHelpers.AddQueryString(originLink, "pageIndex", "1");

                            //create the last page index url
                            var lastPageUrl = QueryHelpers.AddQueryString(originLink, "pageIndex", ViewBag.TotalPage.ToString());
                        }
                        <li class="page-item">
                            <a class="page-link" href="@firstPageUrl" aria-label="Previous">
                                <span aria-hidden="true">&laquo;</span>
                            </a>
                        </li>
                        @{
                           
                            
                            for (int i = 1; i <= ViewBag.TotalPage; i++)
                            {
                                var pagingLink = QueryHelpers.AddQueryString(originLink, "pageIndex", i.ToString());
                                //create <li/> with created link
                                <li class="page-item"><a class="page-link" href="@pagingLink">@i</a></li>
                            }
                        }

                        <li class="page-item">
                            <a class="page-link" href="@lastPageUrl" aria-label="Next">
                                <span aria-hidden="true">&raquo;</span>
                            </a>
                        </li>
                    </ul>
                </nav>
            </div>
        </div>
        <div class="d-flex justify-content-start align-items-center">
            <a class="btn btn-color-custom"
               style="color:#dc4c3e;"
               onclick="showModal('@url', 'New Task')">
                Add new
            </a>
            <div class="p-2">
                <form asp-action="DeleteCompleted" method="post" asp-route-id="@ViewBag.Filters.FilterString">
                    <button type="submit" class="btn btn-color-custom no-wrap">Delete completed tasks</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script src="~/js/html-interaction.js"></script>
    <script src="~/js/script.js"></script>
}



